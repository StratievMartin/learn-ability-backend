generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  AUTHOR
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName    String?
  lastName     String?
  email        String  @unique
  passwordHash String
  role         Role    @default(STUDENT)

  authoredCourses Course[]  @relation("CourseAuthors")
  enrolledCourses Course[]  @relation("CourseStudents")
  lectures        Lecture[] @relation("LectureAuthor")
  articles        Article[] @relation("ArticleAuthor")

  lectureId Int?
  Lecture   Lecture?  @relation(fields: [lectureId], references: [id])
  Article   Article[]

  @@map(name: "users")
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  price       Float?

  lectures       Lecture[]
  keywords       Keyword[]       @relation("CourseKeywords")
  CourseKeywords CourseKeyword[]

  authors  User[]    @relation("CourseAuthors")
  students User[]    @relation("CourseStudents")
  comments Comment[]
  articles Article[]

  @@map(name: "courses")
}

model Lecture {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  content     String  @db.Text
  videoUrl    String

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  authorId Int?
  author   User? @relation("LectureAuthor", fields: [authorId], references: [id])

  comments Comment[]
  User     User[]

  @@map(name: "lectures")
}

model Article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  content     String  @db.Text
  videoUrl    String

  keywords        Keyword[]        @relation("ArticleKeywords")
  ArticleKeywords ArticleKeyword[]

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  authorId Int?
  author   User? @relation("ArticleAuthor", fields: [authorId], references: [id])

  comments Comment[]
  userId   Int?
  User     User?     @relation(fields: [userId], references: [id])

  @@map(name: "articles")
}

model Keyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  articles Article[] @relation("ArticleKeywords")
  courses  Course[]  @relation("CourseKeywords")

  ArticleKeywords ArticleKeyword[]
  CourseKeywords  CourseKeyword[]

  @@map(name: "keywords")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  lectureId Int?
  lecture   Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id])

  @@map(name: "comments")
}

model ArticleKeyword {
  articleId Int
  keywordId Int

  article Article @relation(fields: [articleId], references: [id])
  keyword Keyword @relation(fields: [keywordId], references: [id])

  @@id([articleId, keywordId])
  @@map(name: "article_keywords")
}

model CourseKeyword {
  courseId  Int
  keywordId Int

  course  Course  @relation(fields: [courseId], references: [id])
  keyword Keyword @relation(fields: [keywordId], references: [id])

  @@id([courseId, keywordId])
  @@map(name: "course_keywords")
}
